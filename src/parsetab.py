
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODleftANDORNOTEQUALSEQUALSleftPOWERrightUMINUSleftSRSLrightBNOTleftBANDBORXORLET READ DATA PRINT GOTO IF THEN FOR NEXT TO STEP END STOP DEF GOSUB DIM REM RETURN RUN LIST NEW FIFO AND OR NOT EQUALS PLUS MINUS TIMES DIVIDE POWER LPAREN RPAREN LT LE GT GE NE COMMA SEMI INTEGER HEX FLOAT STRING ID NEWLINE SL SR BAND BOR BNOT XOR MOD EQUALSEQUALSprogram : program statement\n               | statementprogram : errorstatement : INTEGER command NEWLINEstatement : RUN NEWLINE\n                 | LIST NEWLINE\n                 | NEW NEWLINEstatement : INTEGER NEWLINEstatement : INTEGER error NEWLINEstatement : NEWLINEcommand : LET variable EQUALS exprcommand : FIFO variablecommand : FIFO errorcommand : LET variable EQUALS errorcommand : READ varlistcommand : READ errorcommand : DATA numlistcommand : DATA errorcommand : PRINT plist optendcommand : PRINT erroroptend : COMMA \n              | SEMI\n              |command : PRINTcommand : GOTO INTEGERcommand : GOTO errorcommand : IF relexpr THEN INTEGERcommand : IF error THEN INTEGERcommand : IF relexpr THEN errorcommand : FOR ID EQUALS expr TO expr optstepcommand : FOR ID EQUALS error TO expr optstepcommand : FOR ID EQUALS expr TO error optstepcommand : FOR ID EQUALS expr TO expr STEP erroroptstep : STEP expr\n               | emptycommand : NEXT IDcommand : NEXT errorcommand : ENDcommand : REMcommand : STOPcommand : DEF ID LPAREN ID RPAREN EQUALS exprcommand : DEF ID LPAREN ID RPAREN EQUALS errorcommand : DEF ID LPAREN error RPAREN EQUALS exprcommand : GOSUB INTEGERcommand : GOSUB errorcommand : RETURNcommand : DIM dimlistcommand : DIM errordimlist : dimlist COMMA dimitem\n               | dimitemdimitem : ID LPAREN INTEGER RPARENdimitem : ID LPAREN INTEGER COMMA INTEGER RPARENexpr : expr PLUS expr\n            | expr MINUS expr\n            | expr TIMES expr\n            | expr DIVIDE expr\n            | expr LT expr\n            | expr LE expr\n            | expr GT expr\n            | expr GE expr\n            | expr EQUALS expr\n            | expr NE expr\n            | expr AND expr\n            | expr OR expr\n            | expr EQUALSEQUALS expr\n            | expr SR expr \n            | expr SL expr \n            | expr BAND expr \n            | expr BOR expr \n            | expr XOR expr \n            | expr MOD expr\n            | expr POWER exprexpr : INTEGER\n            | FLOAT\n            | HEX\n            | STRINGexpr : variableexpr : LPAREN expr RPARENexpr : MINUS expr %prec UMINUS\n            | BNOT  expr %prec BNOT\n            | NOT  expr %prec NOTrelexpr : expr LT expr\n               | expr LE expr\n               | expr GT expr\n               | expr GE expr\n               | expr EQUALS expr\n               | expr NE expr\n               | expr AND expr\n               | expr OR expr\n               | expr EQUALSEQUALS exprrelexpr : LPAREN expr RPARENrelexpr : NOT expr %prec NOTvariable : ID\n              | ID LPAREN expr RPAREN\n              | ID LPAREN expr COMMA expr RPARENvarlist : varlist COMMA variable\n               | variablenumlist : numlist COMMA number\n               | numbernumber  : INTEGER\n               | FLOAT\n               | HEXnumber  : MINUS INTEGER\n               | MINUS FLOAT\n               | MINUS HEXplist   : plist COMMA pitem\n               | pitempitem : STRINGpitem : STRING exprpitem : exprempty : '
    
_lr_action_items = {'DIM':([8,],[14,]),'DIVIDE':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,92,-76,92,-81,-80,-79,92,92,92,-81,92,-78,-63,92,92,-70,-56,-72,-69,-67,92,-55,-68,92,92,92,-66,-65,-71,92,92,-64,92,-78,-63,92,92,92,92,92,92,-65,-64,92,-94,92,92,92,-95,92,92,92,]),'RETURN':([8,],[13,]),'THEN':([39,48,50,51,52,71,72,75,83,84,85,129,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,164,165,166,167,168,169,170,171,172,173,179,193,],[-93,-75,-73,-77,-74,-76,117,128,-81,-80,-79,-92,-78,-63,-61,-58,-70,-56,-72,-69,-67,-60,-55,-68,-57,-59,-53,-66,-65,-71,-54,-62,-64,-91,-88,-83,-85,-86,-87,-82,-84,-90,-89,-94,-95,]),'READ':([8,],[15,]),'BOR':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,94,-76,94,94,94,94,94,94,94,94,94,-78,94,94,94,-70,94,94,-69,94,94,94,-68,94,94,94,94,94,94,94,94,94,94,-78,94,94,94,94,94,94,94,94,94,94,-94,94,94,94,-95,94,94,94,]),'STOP':([8,],[16,]),'FIFO':([8,],[17,]),'STEP':([39,48,50,51,52,71,83,84,85,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,179,189,190,191,193,],[-93,-75,-73,-77,-74,-76,-81,-80,-79,-78,-63,-61,-58,-70,-56,-72,-69,-67,-60,-55,-68,-57,-59,-53,-66,-65,-71,-54,-62,-64,-94,197,197,201,-95,]),'BNOT':([19,29,43,44,45,46,49,73,76,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,116,119,120,121,122,123,124,125,126,127,130,180,183,184,187,188,197,201,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'REM':([8,],[18,]),'PRINT':([8,],[19,]),'NEW':([0,3,5,6,7,9,10,11,12,22,65,78,],[1,-10,1,-2,-3,-7,-5,-6,-1,-8,-4,-9,]),'DATA':([8,],[21,]),'MINUS':([19,21,29,39,43,44,45,46,48,49,50,51,52,53,71,73,74,76,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,115,116,118,119,120,121,122,123,124,125,126,127,129,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,180,183,184,186,187,188,189,191,193,194,196,197,201,203,],[45,61,45,-93,45,45,45,45,-75,45,-73,-77,-74,105,-76,45,105,45,45,-81,-80,-79,105,105,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,61,45,105,45,45,45,45,45,45,45,45,45,-81,45,105,-78,-63,105,105,-70,-56,-72,-69,-67,105,-55,-68,105,105,-53,-66,-65,-71,-54,105,-64,105,-78,-63,105,105,105,105,105,105,-65,-64,105,-94,45,45,45,105,45,45,105,105,-95,105,105,45,45,105,]),'DEF':([8,],[20,]),'STRING':([19,29,43,44,45,46,49,73,76,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,116,119,120,121,122,123,124,125,126,127,130,180,183,184,187,188,197,201,],[46,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,46,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'LE':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,90,-76,120,-81,-80,-79,90,90,90,-81,90,-78,-63,90,90,-70,-56,-72,-69,-67,90,-55,-68,90,90,-53,-66,-65,-71,-54,90,-64,90,-78,-63,90,90,90,90,90,90,-65,-64,90,-94,90,90,90,-95,90,90,90,]),'RPAREN':([39,48,50,51,52,71,83,84,85,87,118,132,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,157,158,179,185,186,193,],[-93,-75,-73,-77,-74,-76,-81,-80,-79,135,164,178,179,-78,-63,-61,-58,-70,-56,-72,-69,-67,-60,-55,-68,-57,-59,-53,-66,-65,-71,-54,-62,-64,181,182,-94,192,193,-95,]),'POWER':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,93,-76,93,93,-80,-79,93,93,93,93,93,-78,93,93,93,-70,93,-72,-69,-67,93,93,-68,93,93,93,-66,93,93,93,93,93,93,-78,93,93,93,93,93,93,93,93,93,93,-94,93,93,93,-95,93,93,93,]),'XOR':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,91,-76,91,91,91,91,91,91,91,91,91,-78,91,91,91,-70,91,91,-69,91,91,91,-68,91,91,91,91,91,91,91,91,91,91,-78,91,91,91,91,91,91,91,91,91,91,-94,91,91,91,-95,91,91,91,]),'NEWLINE':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,16,18,19,22,24,26,31,32,33,34,36,37,38,39,40,41,42,46,47,48,50,51,52,53,54,56,57,58,59,60,62,63,64,65,66,67,68,69,71,78,83,84,85,86,108,109,110,112,113,114,131,133,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,162,163,174,175,176,178,179,189,190,191,192,193,194,195,196,198,199,200,202,203,204,],[3,9,10,-10,11,3,-2,-3,22,-7,-5,-6,-1,-46,-40,-39,-24,-8,65,-38,78,-50,-47,-48,-15,-16,-97,-93,-13,-12,-107,-76,-20,-75,-73,-77,-74,-110,-23,-101,-102,-99,-18,-100,-17,-37,-36,-4,-45,-44,-25,-26,-76,-9,-81,-80,-79,-109,-22,-21,-19,-103,-104,-105,-49,-96,-78,-63,-61,-58,-70,-56,-72,-69,-67,-60,-55,-68,-57,-59,-53,-66,-65,-71,-54,-62,-64,-106,-98,-27,-29,-28,-14,-11,-51,-94,-111,-111,-111,-52,-95,-43,-42,-41,-31,-35,-32,-30,-34,-33,]),'NE':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,106,-76,123,-81,-80,-79,106,106,106,-81,106,-78,-63,106,106,-70,-56,-72,-69,-67,106,-55,-68,106,106,-53,-66,-65,-71,-54,106,-64,106,-78,-63,106,106,106,106,106,106,-65,-64,106,-94,106,106,106,-95,106,106,106,]),'NEXT':([8,],[23,]),'TO':([39,48,50,51,52,71,83,84,85,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,160,161,179,193,],[-93,-75,-73,-77,-74,-76,-81,-80,-79,-78,-63,-61,-58,-70,-56,-72,-69,-67,-60,-55,-68,-57,-59,-53,-66,-65,-71,-54,-62,-64,183,184,-94,-95,]),'LT':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,99,-76,124,-81,-80,-79,99,99,99,-81,99,-78,-63,99,99,-70,-56,-72,-69,-67,99,-55,-68,99,99,-53,-66,-65,-71,-54,99,-64,99,-78,-63,99,99,99,99,99,99,-65,-64,99,-94,99,99,99,-95,99,99,99,]),'COMMA':([32,33,36,38,39,42,46,48,50,51,52,53,54,56,57,58,60,62,71,83,84,85,86,112,113,114,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,178,179,192,193,],[-50,79,81,-97,-93,-107,-76,-75,-73,-77,-74,-110,109,-101,-102,-99,-100,115,-76,-81,-80,-79,-109,-103,-104,-105,-49,177,-96,180,-78,-63,-61,-58,-70,-56,-72,-69,-67,-60,-55,-68,-57,-59,-53,-66,-65,-71,-54,-62,-64,-106,-98,-51,-94,-52,-95,]),'INTEGER':([0,3,5,6,7,9,10,11,12,19,21,22,25,27,29,43,44,45,46,49,61,65,73,76,78,80,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,115,116,117,119,120,121,122,123,124,125,126,127,128,130,177,180,183,184,187,188,197,201,],[8,-10,8,-2,-3,-7,-5,-6,-1,50,60,-8,67,68,50,50,50,50,50,50,112,-4,50,50,-9,132,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,60,50,162,50,50,50,50,50,50,50,50,50,174,50,185,50,50,50,50,50,50,50,]),'$end':([3,5,6,7,9,10,11,12,22,65,78,],[-10,0,-2,-3,-7,-5,-6,-1,-8,-4,-9,]),'PLUS':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,101,-76,101,-81,-80,-79,101,101,101,-81,101,-78,-63,101,101,-70,-56,-72,-69,-67,101,-55,-68,101,101,-53,-66,-65,-71,-54,101,-64,101,-78,-63,101,101,101,101,101,101,-65,-64,101,-94,101,101,101,-95,101,101,101,]),'GOSUB':([8,],[25,]),'GT':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,100,-76,125,-81,-80,-79,100,100,100,-81,100,-78,-63,100,100,-70,-56,-72,-69,-67,100,-55,-68,100,100,-53,-66,-65,-71,-54,100,-64,100,-78,-63,100,100,100,100,100,100,-65,-64,100,-94,100,100,100,-95,100,100,100,]),'END':([8,],[26,]),'GOTO':([8,],[27,]),'FOR':([8,],[28,]),'SL':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,95,-76,95,95,-80,95,95,95,95,95,95,-78,95,95,95,-70,95,95,-69,-67,95,95,-68,95,95,95,-66,95,95,95,95,95,95,-78,95,95,95,95,95,95,95,95,95,95,-94,95,95,95,-95,95,95,95,]),'HEX':([19,21,29,43,44,45,46,49,61,73,76,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,115,116,119,120,121,122,123,124,125,126,127,130,180,183,184,187,188,197,201,],[48,57,48,48,48,48,48,48,114,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,57,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'EQUALS':([39,46,48,50,51,52,53,70,71,74,77,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,181,182,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,89,116,-76,122,130,-81,-80,-79,89,89,89,-81,89,-78,-63,89,89,-70,-56,-72,-69,-67,89,-55,-68,89,89,-53,-66,-65,-71,-54,89,-64,89,-78,-63,89,89,89,89,89,89,-65,-64,89,-94,187,188,89,89,89,-95,89,89,89,]),'TIMES':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,97,-76,97,-81,-80,-79,97,97,97,-81,97,-78,-63,97,97,-70,-56,-72,-69,-67,97,-55,-68,97,97,97,-66,-65,-71,97,97,-64,97,-78,-63,97,97,97,97,97,97,-65,-64,97,-94,97,97,97,-95,97,97,97,]),'BAND':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,98,-76,98,98,98,98,98,98,98,98,98,-78,98,98,98,-70,98,98,-69,98,98,98,-68,98,98,98,98,98,98,98,98,98,98,-78,98,98,98,98,98,98,98,98,98,98,-94,98,98,98,-95,98,98,98,]),'GE':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,96,-76,121,-81,-80,-79,96,96,96,-81,96,-78,-63,96,96,-70,-56,-72,-69,-67,96,-55,-68,96,96,-53,-66,-65,-71,-54,96,-64,96,-78,-63,96,96,96,96,96,96,-65,-64,96,-94,96,96,96,-95,96,96,96,]),'LPAREN':([19,29,35,39,43,44,45,46,49,55,73,76,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,116,119,120,121,122,123,124,125,126,127,130,180,183,184,187,188,197,201,],[49,73,80,82,49,49,49,49,49,111,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'ID':([14,15,17,19,20,23,28,29,30,43,44,45,46,49,73,76,79,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,111,116,119,120,121,122,123,124,125,126,127,130,180,183,184,187,188,197,201,],[35,39,39,39,55,64,70,39,39,39,39,39,39,39,39,39,35,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,158,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'IF':([8,],[29,]),'AND':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,88,-76,119,-81,-80,-79,88,88,88,-81,88,-78,-63,88,88,-70,88,-72,-69,-67,88,88,-68,88,88,88,-66,-65,88,88,88,-64,88,-78,-63,88,88,88,88,88,88,-65,-64,88,-94,88,88,88,-95,88,88,88,]),'RUN':([0,3,5,6,7,9,10,11,12,22,65,78,],[2,-10,2,-2,-3,-7,-5,-6,-1,-8,-4,-9,]),'SEMI':([39,42,46,48,50,51,52,53,54,71,83,84,85,86,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,179,193,],[-93,-107,-76,-75,-73,-77,-74,-110,108,-76,-81,-80,-79,-109,-78,-63,-61,-58,-70,-56,-72,-69,-67,-60,-55,-68,-57,-59,-53,-66,-65,-71,-54,-62,-64,-106,-94,-95,]),'SR':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,102,-76,102,102,-80,102,102,102,102,102,102,-78,102,102,102,-70,102,102,-69,-67,102,102,-68,102,102,102,-66,102,102,102,102,102,102,-78,102,102,102,102,102,102,102,102,102,102,-94,102,102,102,-95,102,102,102,]),'FLOAT':([19,21,29,43,44,45,46,49,61,73,76,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,115,116,119,120,121,122,123,124,125,126,127,130,180,183,184,187,188,197,201,],[52,56,52,52,52,52,52,52,113,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,56,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'LIST':([0,3,5,6,7,9,10,11,12,22,65,78,],[4,-10,4,-2,-3,-7,-5,-6,-1,-8,-4,-9,]),'EQUALSEQUALS':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,103,-76,126,-81,-80,-79,103,103,103,-81,103,-78,-63,103,103,-70,103,-72,-69,-67,103,103,-68,103,103,103,-66,-65,103,103,103,-64,103,-78,-63,103,103,103,103,103,103,-65,-64,103,-94,103,103,103,-95,103,103,103,]),'LET':([8,],[30,]),'error':([0,8,14,15,17,19,21,23,25,27,29,111,116,117,130,184,188,201,],[7,31,34,37,40,47,59,63,66,69,75,157,160,163,175,190,195,204,]),'NOT':([19,29,43,44,45,46,49,73,76,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,116,119,120,121,122,123,124,125,126,127,130,180,183,184,187,188,197,201,],[43,76,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'OR':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,107,-76,127,-81,-80,-79,107,107,107,-81,107,-78,-63,107,107,-70,107,-72,-69,-67,107,107,-68,107,107,107,-66,-65,107,107,107,-64,107,-78,-63,107,107,107,107,107,107,-65,-64,107,-94,107,107,107,-95,107,107,107,]),'MOD':([39,46,48,50,51,52,53,71,74,83,84,85,86,87,118,129,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,161,164,165,166,167,168,169,170,171,172,173,176,179,186,189,191,193,194,196,203,],[-93,-76,-75,-73,-77,-74,104,-76,104,-81,-80,-79,104,104,104,-81,104,-78,-63,104,104,-70,-56,-72,-69,-67,104,-55,-68,104,104,104,-66,-65,-71,104,104,-64,104,-78,-63,104,104,104,104,104,104,-65,-64,104,-94,104,104,104,-95,104,104,104,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'dimitem':([14,79,],[32,131,]),'pitem':([19,109,],[42,156,]),'relexpr':([29,],[72,]),'optstep':([189,190,191,],[198,200,202,]),'varlist':([15,],[36,]),'expr':([19,29,43,44,45,46,49,73,76,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,116,119,120,121,122,123,124,125,126,127,130,180,183,184,187,188,197,201,],[53,74,83,84,85,86,87,118,129,134,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,53,161,165,166,167,168,169,170,171,172,173,176,186,189,191,194,196,203,203,]),'number':([21,115,],[58,159,]),'dimlist':([14,],[33,]),'program':([0,],[5,]),'command':([8,],[24,]),'statement':([0,5,],[6,12,]),'variable':([15,17,19,29,30,43,44,45,46,49,73,76,81,82,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,116,119,120,121,122,123,124,125,126,127,130,180,183,184,187,188,197,201,],[38,41,51,51,77,51,51,51,51,51,51,51,133,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'optend':([54,],[110,]),'plist':([19,],[54,]),'empty':([189,190,191,],[199,199,199,]),'numlist':([21,],[62,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> program statement','program',2,'p_program','basparse.py',24),
  ('program -> statement','program',1,'p_program','basparse.py',25),
  ('program -> error','program',1,'p_program_error','basparse.py',44),
  ('statement -> INTEGER command NEWLINE','statement',3,'p_statement','basparse.py',52),
  ('statement -> RUN NEWLINE','statement',2,'p_statement_interactive','basparse.py',65),
  ('statement -> LIST NEWLINE','statement',2,'p_statement_interactive','basparse.py',66),
  ('statement -> NEW NEWLINE','statement',2,'p_statement_interactive','basparse.py',67),
  ('statement -> INTEGER NEWLINE','statement',2,'p_statement_blank','basparse.py',74),
  ('statement -> INTEGER error NEWLINE','statement',3,'p_statement_bad','basparse.py',81),
  ('statement -> NEWLINE','statement',1,'p_statement_newline','basparse.py',90),
  ('command -> LET variable EQUALS expr','command',4,'p_command_let','basparse.py',96),
  ('command -> FIFO variable','command',2,'p_command_fifo','basparse.py',102),
  ('command -> FIFO error','command',2,'p_command_fifo_bad','basparse.py',106),
  ('command -> LET variable EQUALS error','command',4,'p_command_let_bad','basparse.py',110),
  ('command -> READ varlist','command',2,'p_command_read','basparse.py',117),
  ('command -> READ error','command',2,'p_command_read_bad','basparse.py',122),
  ('command -> DATA numlist','command',2,'p_command_data','basparse.py',129),
  ('command -> DATA error','command',2,'p_command_data_bad','basparse.py',134),
  ('command -> PRINT plist optend','command',3,'p_command_print','basparse.py',141),
  ('command -> PRINT error','command',2,'p_command_print_bad','basparse.py',146),
  ('optend -> COMMA','optend',1,'p_optend','basparse.py',153),
  ('optend -> SEMI','optend',1,'p_optend','basparse.py',154),
  ('optend -> <empty>','optend',0,'p_optend','basparse.py',155),
  ('command -> PRINT','command',1,'p_command_print_empty','basparse.py',165),
  ('command -> GOTO INTEGER','command',2,'p_command_goto','basparse.py',172),
  ('command -> GOTO error','command',2,'p_command_goto_bad','basparse.py',177),
  ('command -> IF relexpr THEN INTEGER','command',4,'p_command_if','basparse.py',184),
  ('command -> IF error THEN INTEGER','command',4,'p_command_if_bad','basparse.py',189),
  ('command -> IF relexpr THEN error','command',4,'p_command_if_bad2','basparse.py',194),
  ('command -> FOR ID EQUALS expr TO expr optstep','command',7,'p_command_for','basparse.py',201),
  ('command -> FOR ID EQUALS error TO expr optstep','command',7,'p_command_for_bad_initial','basparse.py',206),
  ('command -> FOR ID EQUALS expr TO error optstep','command',7,'p_command_for_bad_final','basparse.py',211),
  ('command -> FOR ID EQUALS expr TO expr STEP error','command',8,'p_command_for_bad_step','basparse.py',216),
  ('optstep -> STEP expr','optstep',2,'p_optstep','basparse.py',223),
  ('optstep -> empty','optstep',1,'p_optstep','basparse.py',224),
  ('command -> NEXT ID','command',2,'p_command_next','basparse.py',234),
  ('command -> NEXT error','command',2,'p_command_next_bad','basparse.py',240),
  ('command -> END','command',1,'p_command_end','basparse.py',247),
  ('command -> REM','command',1,'p_command_rem','basparse.py',254),
  ('command -> STOP','command',1,'p_command_stop','basparse.py',261),
  ('command -> DEF ID LPAREN ID RPAREN EQUALS expr','command',7,'p_command_def','basparse.py',268),
  ('command -> DEF ID LPAREN ID RPAREN EQUALS error','command',7,'p_command_def_bad_rhs','basparse.py',273),
  ('command -> DEF ID LPAREN error RPAREN EQUALS expr','command',7,'p_command_def_bad_arg','basparse.py',278),
  ('command -> GOSUB INTEGER','command',2,'p_command_gosub','basparse.py',285),
  ('command -> GOSUB error','command',2,'p_command_gosub_bad','basparse.py',290),
  ('command -> RETURN','command',1,'p_command_return','basparse.py',297),
  ('command -> DIM dimlist','command',2,'p_command_dim','basparse.py',304),
  ('command -> DIM error','command',2,'p_command_dim_bad','basparse.py',309),
  ('dimlist -> dimlist COMMA dimitem','dimlist',3,'p_dimlist','basparse.py',316),
  ('dimlist -> dimitem','dimlist',1,'p_dimlist','basparse.py',317),
  ('dimitem -> ID LPAREN INTEGER RPAREN','dimitem',4,'p_dimitem_single','basparse.py',328),
  ('dimitem -> ID LPAREN INTEGER COMMA INTEGER RPAREN','dimitem',6,'p_dimitem_double','basparse.py',333),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','basparse.py',340),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','basparse.py',341),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binary','basparse.py',342),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binary','basparse.py',343),
  ('expr -> expr LT expr','expr',3,'p_expr_binary','basparse.py',344),
  ('expr -> expr LE expr','expr',3,'p_expr_binary','basparse.py',345),
  ('expr -> expr GT expr','expr',3,'p_expr_binary','basparse.py',346),
  ('expr -> expr GE expr','expr',3,'p_expr_binary','basparse.py',347),
  ('expr -> expr EQUALS expr','expr',3,'p_expr_binary','basparse.py',348),
  ('expr -> expr NE expr','expr',3,'p_expr_binary','basparse.py',349),
  ('expr -> expr AND expr','expr',3,'p_expr_binary','basparse.py',350),
  ('expr -> expr OR expr','expr',3,'p_expr_binary','basparse.py',351),
  ('expr -> expr EQUALSEQUALS expr','expr',3,'p_expr_binary','basparse.py',352),
  ('expr -> expr SR expr','expr',3,'p_expr_binary','basparse.py',353),
  ('expr -> expr SL expr','expr',3,'p_expr_binary','basparse.py',354),
  ('expr -> expr BAND expr','expr',3,'p_expr_binary','basparse.py',355),
  ('expr -> expr BOR expr','expr',3,'p_expr_binary','basparse.py',356),
  ('expr -> expr XOR expr','expr',3,'p_expr_binary','basparse.py',357),
  ('expr -> expr MOD expr','expr',3,'p_expr_binary','basparse.py',358),
  ('expr -> expr POWER expr','expr',3,'p_expr_binary','basparse.py',359),
  ('expr -> INTEGER','expr',1,'p_expr_number','basparse.py',364),
  ('expr -> FLOAT','expr',1,'p_expr_number','basparse.py',365),
  ('expr -> HEX','expr',1,'p_expr_number','basparse.py',366),
  ('expr -> STRING','expr',1,'p_expr_number','basparse.py',367),
  ('expr -> variable','expr',1,'p_expr_variable','basparse.py',372),
  ('expr -> LPAREN expr RPAREN','expr',3,'p_expr_group','basparse.py',377),
  ('expr -> MINUS expr','expr',2,'p_expr_unary','basparse.py',382),
  ('expr -> BNOT expr','expr',2,'p_expr_unary','basparse.py',383),
  ('expr -> NOT expr','expr',2,'p_expr_unary','basparse.py',384),
  ('relexpr -> expr LT expr','relexpr',3,'p_relexpr','basparse.py',391),
  ('relexpr -> expr LE expr','relexpr',3,'p_relexpr','basparse.py',392),
  ('relexpr -> expr GT expr','relexpr',3,'p_relexpr','basparse.py',393),
  ('relexpr -> expr GE expr','relexpr',3,'p_relexpr','basparse.py',394),
  ('relexpr -> expr EQUALS expr','relexpr',3,'p_relexpr','basparse.py',395),
  ('relexpr -> expr NE expr','relexpr',3,'p_relexpr','basparse.py',396),
  ('relexpr -> expr AND expr','relexpr',3,'p_relexpr','basparse.py',397),
  ('relexpr -> expr OR expr','relexpr',3,'p_relexpr','basparse.py',398),
  ('relexpr -> expr EQUALSEQUALS expr','relexpr',3,'p_relexpr','basparse.py',399),
  ('relexpr -> LPAREN expr RPAREN','relexpr',3,'p_relexpr_group','basparse.py',403),
  ('relexpr -> NOT expr','relexpr',2,'p_relexpr_unary','basparse.py',407),
  ('variable -> ID','variable',1,'p_variable','basparse.py',414),
  ('variable -> ID LPAREN expr RPAREN','variable',4,'p_variable','basparse.py',415),
  ('variable -> ID LPAREN expr COMMA expr RPAREN','variable',6,'p_variable','basparse.py',416),
  ('varlist -> varlist COMMA variable','varlist',3,'p_varlist','basparse.py',428),
  ('varlist -> variable','varlist',1,'p_varlist','basparse.py',429),
  ('numlist -> numlist COMMA number','numlist',3,'p_numlist','basparse.py',440),
  ('numlist -> number','numlist',1,'p_numlist','basparse.py',441),
  ('number -> INTEGER','number',1,'p_number','basparse.py',453),
  ('number -> FLOAT','number',1,'p_number','basparse.py',454),
  ('number -> HEX','number',1,'p_number','basparse.py',455),
  ('number -> MINUS INTEGER','number',2,'p_number_signed','basparse.py',462),
  ('number -> MINUS FLOAT','number',2,'p_number_signed','basparse.py',463),
  ('number -> MINUS HEX','number',2,'p_number_signed','basparse.py',464),
  ('plist -> plist COMMA pitem','plist',3,'p_plist','basparse.py',472),
  ('plist -> pitem','plist',1,'p_plist','basparse.py',473),
  ('pitem -> STRING','pitem',1,'p_item_string','basparse.py',482),
  ('pitem -> STRING expr','pitem',2,'p_item_string_expr','basparse.py',487),
  ('pitem -> expr','pitem',1,'p_item_expr','basparse.py',492),
  ('empty -> <empty>','empty',0,'p_empty','basparse.py',499),
]
